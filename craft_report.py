import pandas as pd
import glob
import matplotlib.pyplot as plt



def get_geneset_to_acc(result_folder:str) -> dict:
    """Get Gene Set and their associated ACC from results files generated by classifiers
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : name of gene set associated to an accuracy
    
    """

    # init dict
    geneset_to_acc = {}
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # extract gene name
        geneset = rf.split("/")[-1].replace("_log_clf.csv", "")

        # get acc from results
        df = pd.read_csv(rf)
        df = df[df['METRIC'] == 'ACC']
        acc = list(df['VALUE'])[0]

        # update dict
        geneset_to_acc[geneset] = acc

    # return dict
    return geneset_to_acc
        

def get_geneset_to_auc(result_folder:str) -> dict:
    """Get Gene Set and their associated AUC from results files generated by classifiers
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : name of gene set associated to an auc
    
    """

    # init dict
    geneset_to_acc = {}
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # extract gene name
        geneset = rf.split("/")[-1].replace("_log_clf.csv", "")

        # get acc from results
        df = pd.read_csv(rf)
        df = df[df['METRIC'] == 'AUC']
        acc = list(df['VALUE'])[0]

        # update dict
        geneset_to_acc[geneset] = acc

    # return dict
    return geneset_to_acc
    

def plot_acc(result_folder:str, figure_file:str) -> None:
    """Generate figure of sorted acc from results
    
    Args:
        - result_folder (str) : path to the folder containing the results files
        - figure_file (str) : path to save figure
    
    """

    # get acc
    geneset_to_acc =get_geneset_to_acc(result_folder)
    
    # sort gene sets by acc
    sorted_items = sorted(geneset_to_acc.items(), key=lambda x: x[1])

    # unpack & clean acc
    names, accs = zip(*sorted_items)
    accs = [round(float(f), 5) for f in accs]

    # craft figure
    plt.figure(figsize=(8, 5))
    plt.barh(names, accs)
    plt.xlabel("ACC")
    plt.ylabel("Gene Set")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(figure_file)
    plt.close()


def plot_auc(result_folder:str, figure_file:str) -> None:
    """Generate figure of sorted auc from results
    
    Args:
        - result_folder (str) : path to the folder containing the results files
        - figure_file (str) : path to save figure
    
    """

    # get acc
    geneset_to_acc =get_geneset_to_auc(result_folder)
    
    # sort gene sets by acc
    sorted_items = sorted(geneset_to_acc.items(), key=lambda x: x[1])

    # unpack & clean acc
    names, accs = zip(*sorted_items)
    accs = [round(float(f), 5) for f in accs]

    # craft figure
    plt.figure(figsize=(8, 5))
    plt.barh(names, accs)
    plt.xlabel("AUC")
    plt.ylabel("Gene Set")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(figure_file)
    plt.close()


def extract_config_from_results(result_folder:str) -> dict:
    """Extract configuration from files in result folders, make sure every file has the same configuration
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : configuration of the run
        
    """

    # init config
    config = {}
    j_list = []
    q_list = []
    audio_duration_list = []
    clf_list = []
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # get infos from results
        df = pd.read_csv(rf)
        j_list.append(list(df[df['METRIC'] == "J"]['VALUE'])[0])
        q_list.append(list(df[df['METRIC'] == "Q"]['VALUE'])[0])
        audio_duration_list.append(list(df[df['METRIC'] == "Audio-Duration"]['VALUE'])[0])
        clf_list.append(list(df[df['METRIC'] == "CLF"]['VALUE'])[0])

    # check that all extracted config are the same
    if len(list(set(j_list))) == 1:
        config['J'] = j_list[0]
    else:
        config['J'] = 'WARNING : Multiple Values Found'
    if len(list(set(q_list))) == 1:
        config['Q'] = q_list[0]
    else:
        config['Q'] = 'WARNING : Multiple Values Found'
    if len(list(set(audio_duration_list))) == 1:
        config['Audio-Duration'] = audio_duration_list[0]
    else:
        config['Audio-Duration'] = 'WARNING : Multiple Values Found'
    if len(list(set(clf_list))) == 1:
        config['CLF'] = clf_list[0]
    else:
        config['CLF'] = 'WARNING : Multiple Values Found'

    # return config
    return config        



if __name__ == "__main__":

    # plot_auc("/tmp/zog/results", "/tmp/test.png")
    machin = extract_config_from_results("/tmp/zog/results")

    
