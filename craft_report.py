import pandas as pd
import glob
import matplotlib.pyplot as plt



def get_geneset_to_acc(result_folder:str) -> dict:
    """Get Gene Set and their associated ACC from results files generated by classifiers
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : name of gene set associated to an accuracy
    
    """

    # init dict
    geneset_to_acc = {}
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # extract gene name
        geneset = rf.split("/")[-1].replace("_log_clf.csv", "")

        # get acc from results
        df = pd.read_csv(rf)
        df = df[df['METRIC'] == 'ACC']
        acc = list(df['VALUE'])[0]

        # update dict
        geneset_to_acc[geneset] = acc

    # return dict
    return geneset_to_acc
        

def get_geneset_to_auc(result_folder:str) -> dict:
    """Get Gene Set and their associated AUC from results files generated by classifiers
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : name of gene set associated to an auc
    
    """

    # init dict
    geneset_to_acc = {}
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # extract gene name
        geneset = rf.split("/")[-1].replace("_log_clf.csv", "")

        # get acc from results
        df = pd.read_csv(rf)
        df = df[df['METRIC'] == 'AUC']
        acc = list(df['VALUE'])[0]

        # update dict
        geneset_to_acc[geneset] = acc

    # return dict
    return geneset_to_acc
    

def plot_acc(result_folder:str, figure_file:str) -> None:
    """Generate figure of sorted acc from results
    
    Args:
        - result_folder (str) : path to the folder containing the results files
        - figure_file (str) : path to save figure
    
    """

    # get acc
    geneset_to_acc =get_geneset_to_acc(result_folder)
    
    # sort gene sets by acc
    sorted_items = sorted(geneset_to_acc.items(), key=lambda x: x[1])

    # unpack & clean acc
    names, accs = zip(*sorted_items)
    accs = [round(float(f), 5) for f in accs]

    # craft figure
    plt.figure(figsize=(8, 5))
    plt.barh(names, accs)
    plt.xlabel("ACC")
    plt.ylabel("Gene Set")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(figure_file)
    plt.close()


def plot_auc(result_folder:str, figure_file:str) -> None:
    """Generate figure of sorted auc from results
    
    Args:
        - result_folder (str) : path to the folder containing the results files
        - figure_file (str) : path to save figure
    
    """

    # get acc
    geneset_to_acc =get_geneset_to_auc(result_folder)
    
    # sort gene sets by acc
    sorted_items = sorted(geneset_to_acc.items(), key=lambda x: x[1])

    # unpack & clean acc
    names, accs = zip(*sorted_items)
    accs = [round(float(f), 5) for f in accs]

    # craft figure
    plt.figure(figsize=(8, 5))
    plt.barh(names, accs)
    plt.xlabel("AUC")
    plt.ylabel("Gene Set")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(figure_file)
    plt.close()







if __name__ == "__main__":

    plot_auc("/tmp/zog/results", "/tmp/test.png")

    
