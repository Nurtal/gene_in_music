import pandas as pd
import glob
import matplotlib.pyplot as plt
import os
import pypandoc
import shutil
import markdown
from weasyprint import HTML



def get_geneset_to_acc(result_folder:str) -> dict:
    """Get Gene Set and their associated ACC from results files generated by classifiers
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : name of gene set associated to an accuracy
    
    """

    # init dict
    geneset_to_acc = {}
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # extract gene name
        geneset = rf.split("/")[-1].replace("_log_clf.csv", "")

        # get acc from results
        df = pd.read_csv(rf)
        df = df[df['METRIC'] == 'ACC']
        acc = list(df['VALUE'])[0]

        # update dict
        geneset_to_acc[geneset] = acc

    # return dict
    return geneset_to_acc
        

def get_geneset_to_auc(result_folder:str) -> dict:
    """Get Gene Set and their associated AUC from results files generated by classifiers
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : name of gene set associated to an auc
    
    """

    # init dict
    geneset_to_acc = {}
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # extract gene name
        geneset = rf.split("/")[-1].replace("_log_clf.csv", "")

        # get acc from results
        df = pd.read_csv(rf)
        df = df[df['METRIC'] == 'AUC']
        acc = list(df['VALUE'])[0]

        # update dict
        geneset_to_acc[geneset] = acc

    # return dict
    return geneset_to_acc
    

def plot_acc(result_folder:str, figure_file:str) -> None:
    """Generate figure of sorted acc from results
    
    Args:
        - result_folder (str) : path to the folder containing the results files
        - figure_file (str) : path to save figure
    
    """

    # get acc
    geneset_to_acc =get_geneset_to_acc(result_folder)
    
    # sort gene sets by acc
    sorted_items = sorted(geneset_to_acc.items(), key=lambda x: x[1])

    # unpack & clean acc
    names, accs = zip(*sorted_items)
    accs = [round(float(f), 5) for f in accs]

    # craft figure
    plt.figure(figsize=(8, 5))
    plt.barh(names, accs)
    plt.xlabel("ACC")
    plt.ylabel("Gene Set")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(figure_file)
    plt.close()


def plot_auc(result_folder:str, figure_file:str) -> None:
    """Generate figure of sorted auc from results
    
    Args:
        - result_folder (str) : path to the folder containing the results files
        - figure_file (str) : path to save figure
    
    """

    # get acc
    geneset_to_acc =get_geneset_to_auc(result_folder)
    
    # sort gene sets by acc
    sorted_items = sorted(geneset_to_acc.items(), key=lambda x: x[1])

    # unpack & clean acc
    names, accs = zip(*sorted_items)
    accs = [round(float(f), 5) for f in accs]

    # craft figure
    plt.figure(figsize=(8, 5))
    plt.barh(names, accs)
    plt.xlabel("AUC")
    plt.ylabel("Gene Set")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(figure_file)
    plt.close()


def extract_config_from_results(result_folder:str) -> dict:
    """Extract configuration from files in result folders, make sure every file has the same configuration
    
    Args:
        - result_folder (str) : path to the folder containing the results files

    Returns:
        - (dict) : configuration of the run
        
    """

    # init config
    config = {}
    j_list = []
    q_list = []
    audio_duration_list = []
    clf_list = []
    
    # loop over result files
    result_files = glob.glob(f"{result_folder}/*.csv")
    for rf in result_files:

        # get infos from results
        df = pd.read_csv(rf)
        j_list.append(list(df[df['METRIC'] == "J"]['VALUE'])[0])
        q_list.append(list(df[df['METRIC'] == "Q"]['VALUE'])[0])
        audio_duration_list.append(list(df[df['METRIC'] == "Audio-Duration"]['VALUE'])[0])
        clf_list.append(list(df[df['METRIC'] == "CLF"]['VALUE'])[0])

    # check that all extracted config are the same
    if len(list(set(j_list))) == 1:
        config['J'] = j_list[0]
    else:
        config['J'] = 'WARNING : Multiple Values Found'
    if len(list(set(q_list))) == 1:
        config['Q'] = q_list[0]
    else:
        config['Q'] = 'WARNING : Multiple Values Found'
    if len(list(set(audio_duration_list))) == 1:
        config['Audio-Duration'] = audio_duration_list[0]
    else:
        config['Audio-Duration'] = 'WARNING : Multiple Values Found'
    if len(list(set(clf_list))) == 1:
        config['CLF'] = clf_list[0]
    else:
        config['CLF'] = 'WARNING : Multiple Values Found'

    # return config
    return config        


def extract_data_infos(signal_folder:str) -> dict:
    """Extract infos about data from signal folder

    Args:
        - signal_folder (str) : path to the folder containing signals (.wav) files

    Returns:
        - (dict) : extracted informations
    
    """

    # init
    infos = {
        "n_genes_sets":None,
        "n_class":None
    }

    # count gene sets
    fld_list = []
    for fld in glob.glob(f"{signal_folder}/*"):
        if os.path.isdir(fld):
            fld_list.append(fld)
    infos['n_genes_sets'] = len(fld_list)

    # get nb class
    class_folder_list = []
    if len(fld_list) > 0:
        for cfld in glob.glob(f"{fld_list[0]}/*"):
            if os.path.isdir(fld):
                class_folder_list.append(cfld)
    infos['n_class'] = len(class_folder_list)

    # get class to n_samples
    for class_folder in class_folder_list:
        class_name = class_folder.split("/")[-1]
        infos[f"n_{class_name}"] = 0
        for sig_file in glob.glob(f"{class_folder}/*.wav"):
            infos[f"n_{class_name}"] += 1

    return infos               


def craft_run_report(run_folder:str) -> None:
    """Craft a markdown report and turn into a pdf file (ugly, for now)

    Args:
        - run_folder (str) : path to the run folder, should contains results subflder
    
    """

    # init
    interesting_sets = []

    # prepare folders for report generation
    if os.path.exists(f"{run_folder}/report") and os.path.isdir(f"{run_folder}/report"):
        shutil.rmtree(f"{run_folder}/report")
    os.mkdir(f"{run_folder}/report")

    # extract informations
    scat_gene_set_to_acc = get_geneset_to_acc(f"{run_folder}/results") 
    scat_gene_set_to_auc = get_geneset_to_auc(f"{run_folder}/results") 
    direct_gene_set_to_acc = get_geneset_to_acc(f"{run_folder}/results_direct") 
    direct_gene_set_to_auc = get_geneset_to_auc(f"{run_folder}/results_direct") 
    umap_gene_set_to_acc = get_geneset_to_acc(f"{run_folder}/results_umap") 
    umap_gene_set_to_auc = get_geneset_to_auc(f"{run_folder}/results_umap")
    infos = extract_data_infos(f"{run_folder}/signals")    
    config = extract_config_from_results(f"{run_folder}/results")

    # generate markdown report
    md_report = open(f"{run_folder}/report/report.md", "w")
    md_report.write("# Run Report\n")
    md_report.write("## Data\n")
    md_report.write(f"- {infos['n_genes_sets']} analyzed pathways\n")
    md_report.write(f"- {infos['n_class']} targets\n")
    for k in infos:
        if k not in ['n_genes_sets', 'n_class']:
            md_report.write(f"- {k} : {infos[k]} samples \n")

    # write config
    md_report.write("\n")
    md_report.write("## Configuration\n")
    md_report.write(f"- J : {config['J']}\n")
    md_report.write(f"- Q : {config['Q']}\n")
    md_report.write(f"- Audio-Duration : {config['Audio-Duration']}\n")
            
    # write performances
    md_report.write("\n")
    for gene_set in list(scat_gene_set_to_acc.keys()):
        md_report.write(f"## {gene_set}\n")
        md_report.write(f"### Perfs\n\n")

        # extract metrics
        scat_acc = scat_gene_set_to_acc[gene_set]
        scat_auc = scat_gene_set_to_auc[gene_set]
        umap_acc = umap_gene_set_to_acc[gene_set]
        umap_auc = umap_gene_set_to_auc[gene_set]
        direct_acc = direct_gene_set_to_acc[gene_set]
        direct_auc = direct_gene_set_to_auc[gene_set]

        # craft result table
        md_report.write("| METRICS | GIM | Direct | UMAP |\n")
        md_report.write("|---------|-----|--------|------|\n")
        md_report.write(f"| ACC | {scat_acc} | {direct_acc} | {umap_acc} |\n")
        md_report.write(f"| AUC | {scat_auc} | {direct_auc} | {umap_auc} |\n\n")

        # spot interesting configuration
        if (scat_acc > umap_acc) and (scat_acc > direct_acc) and gene_set not in interesting_sets:
            interesting_sets.append(gene_set)
        if (scat_auc > umap_auc) and (scat_auc > direct_auc) and gene_set not in interesting_sets:
            interesting_sets.append(gene_set)

    # display interesting_sets
    md_report.write("\n")
    md_report.write("## Set to investigate\n")
    for gene_set in interesting_sets:
        md_report.write(f"- {gene_set}\n")
        
    # close report
    md_report.close()

    # convert Markdown to HTML
    with open(f"{run_folder}/report/report.md", "r", encoding='utf-8') as f:
        md_text = f.read()
    html_text = markdown.markdown(md_text)

    # convert html to pdf
    HTML(string=html_text).write_pdf(f"{run_folder}/report/report.pdf")

    
def craft_exploration_report(exploration_folder:str):
    """IN PROGRESS"""

    # get list of markdown files present in exploration folder
    run_file_list = glob.glob(f"{exploration_folder}/*.md")

    # extract run to config
    run_to_config = {}
    for run_file in run_file_list:

        # read file
        run_data = open(run_file, "r")
        for line in run_data:
            print(line.rstrip())

        run_data.close()
        print("-"*45)

    


if __name__ == "__main__":

    # plot_auc("/tmp/zog/results", "/tmp/test.png")
    # machin = extract_config_from_results("/tmp/zog/results")
    # extract_data_infos("/tmp/zog/signals")
    # craft_run_report("/tmp/zogzog")
    craft_exploration_report("exploration")

    
